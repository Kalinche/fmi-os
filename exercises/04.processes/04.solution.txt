04-a-5000.txt
Намерете командите на 10-те най-стари процеси в системата.

ps -eo cmd --sort etimes | tail -10


04-a-6000.txt
Намерете PID и командата на процеса, който заема най-много виртуална памет в системата.

ps -eo pid --sort vsz | tail -1


04-a-6300.txt
Изведете командата на най-стария процес

ps -eo cmd --sort etimes | tail -1


04-b-5000.txt
Намерете колко физическа памет заемат всички процеси на потребителската група root.

s62625@astero:~$ ps -eo group,size | tail -n +1 | tr -s ' ' | awk -F " " '{ if($1 == "root") {s+=$2}} END {print s}'
s62625@astero:~$ ps -eo group=,size= | egrep '^root' |  awk '{i+=$2} END{print i}'

04-b-6100.txt
Изведете имената на потребителите, които имат поне 2 процеса, чиято команда е vim (независимо какви са аргументите й)

s62625@astero:~$ ps -eo user,comm | tail -n +2 | sort | uniq -c | awk '$1 >= 2 && $3 == "vim"{print $2}'
s62625@astero:~$ ps -eo comm,user | grep "vim" | sort | uniq -c | awk '$1>=2'


04-b-6200.txt
Изведете имената на потребителите, които не са логнати в момента, но имат живи процеси

ps -eo user | tail -n +2 | sort | uniq | egrep -v "^$(who | cut -d " " -f 1)$"
s62625@astero:~$ ps -eo user= | sort | uniq | grep "^$(who | cut -d " " -f 1)$"


04-b-7000.txt
Намерете колко физическа памет заемат осреднено всички процеси на потребителската група root. Внимавайте, когато групата няма нито един процес.

ps -eo group,size | tail -n +2 | tr -s " " | awk -F " " '{ if($1 == "root") { sum+=$2; ++count} } END { if(count == 0) print "0"; else print sum/count }'


04-b-8000.txt
Намерете всички PID и техните команди (без аргументите), които нямат tty, което ги управлява. Изведете списък само с командите без повторения.

ps -eo tty,pid,comm | tail -n +2 | awk '$1 == "?" {print $2,$3}'

ps -eo tty,pid,comm | tail -n +2 | awk '$1 == "?" {print $3}' | sort | uniq

04-b-9000.txt
Да се отпечатат PID на всички процеси, които имат повече деца от родителския си процес.


